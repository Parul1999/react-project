{"version":3,"sources":["Header.js","Teams.js","App.js","Games.js","Popover.js","serviceWorker.js","index.js"],"names":["Header","className","style","textAlign","padding","color","fontWeight","fontSize","Teams","props","state","items","isLoaded","fetch","then","res","json","setState","data","catch","err","console","log","this","map","item","Card","key","id","data-toggle","title","full_name","data-content","CardBody","CardTitle","name","CardText","city","React","Component","App","width","backgroundColor","height","marginLeft","borderColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAiBeA,EAfF,WAIT,OACI,6BACA,yBAAKC,UAAU,SAAQC,MAJT,CAACC,UAAW,SAAUC,QAAS,GAAIC,MAAO,SAASC,WAAW,OAAOC,SAAS,SAI5F,c,wCCyDOC,E,YAxDX,WAAYC,GAAQ,IAAD,8BAEf,4CAAMA,KAEDC,MAAQ,CACTC,MAAO,GACPC,UAAU,GANC,E,iFAaE,IAAD,OAEhBC,MAAM,2CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACVN,MAAOK,EAAKE,KACZN,UAAU,OAEfO,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAKd,IAAD,EAEuBG,KAAKb,MAAzBE,EAFH,EAEGA,SAAUD,EAFb,EAEaA,MAElB,OAAKC,EAGD,yBAAKX,UAAU,QAENU,EAAMa,KAAI,SAAAC,GAAI,OAEf,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAKG,GAAIC,cAAY,UAAUC,MAAQL,EAAKM,UAAWC,eAAa,iCAC/E,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWN,GAAG,SAAUH,EAAKU,MAC7B,kBAACC,EAAA,EAAD,CAAUR,GAAG,UAAUH,EAAKY,YAT/B,+C,GAnCCC,IAAMC,WCoBXC,G,MCxBKF,IAAMC,U,MCIJD,IAAMC,U,iLFG1B,OACE,6BACD,kBAAC,EAAD,MACA,6BAEO,4BAAQrC,MAPG,CAACuC,MAAM,MAAMC,gBAAgB,SAAUC,OAAO,OAAOC,WAAW,MAAMvC,MAAM,UAOvF,aACA,4BAAQH,MAPG,CAACuC,MAAM,MAAMC,gBAAgB,QAASC,OAAO,OAAOE,YAAY,eAO3E,aACA,kBAAC,EAAD,Y,GAZQP,IAAMC,YGOJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.0c443136.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header=function()\r\n{\r\n    const headerStyle={textAlign: 'center', padding: 20, color: 'orange',fontWeight:'bold',fontSize:'25px'};\r\n    \r\n    return(\r\n        <div>\r\n        <div className=\"header\"style={headerStyle} >\r\n        NBA REPO\r\n        </div>\r\n        \r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css'\r\nimport {\r\n    Card, CardText, CardBody,\r\n    CardTitle\r\n  } from 'reactstrap';\r\n\r\nclass Teams extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false\r\n        }\r\n\r\n    }\r\n    \r\n\r\n   \r\n    componentDidMount() {\r\n\r\n        fetch('https://www.balldontlie.io/api/v1/teams')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    items: json.data,\r\n                    isLoaded: true, \r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoaded, items } = this.state;\r\n\r\n        if (!isLoaded)\r\n            return <div>Loading...</div>;\r\n        return (\r\n            <div className=\"Team\">\r\n              \r\n                    {items.map(item => ( \r\n  \r\n                    <Card key={item.id} data-toggle=\"popover\" title= {item.full_name} data-content=\"{item.city}{item.destination}\">\r\n                    <CardBody>\r\n                      <CardTitle id=\"first\" >{item.name}</CardTitle>\r\n                      <CardText id=\"second\">{item.city}</CardText>\r\n                    </CardBody> \r\n                  </Card>\r\n                  \r\n                  ))}\r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n// https://coreui.io/docs/components/popovers/\r\n\r\nexport default Teams;","import React,{Component} from 'react';\nimport Header from './Header';\nimport Teams from './Teams';\nimport Games from './Games';\nimport Pop from './Popover'\nclass App extends React.Component {\n render()\n {\n  const buttonStyle1={width:'25%',backgroundColor:'orange', height:'30px',marginLeft:'24%',color:'white'};\n  const buttonStyle2={width:'25%',backgroundColor:'white', height:'30px',borderColor:'ghostwhite'}\n  return (\n    <div>\n   <Header/>\n   <div>\n  \n          <button style={buttonStyle1}  >NBA Teams</button>\n          <button style={buttonStyle2} >NBA Games</button>\n          <Teams/>\n          {/* <Games/> */}\n          {/* <Pop/> */}\n          \n   </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\r\nimport './style2.css'\r\n\r\nclass Games extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false\r\n        }\r\n\r\n    }\r\n\r\n   \r\n    componentDidMount() {\r\n\r\n        fetch('https://www.balldontlie.io/api/v1/games')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    items: json.data,\r\n                    isLoaded: true, \r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoaded, items } = this.state;\r\n        \r\n        if (!isLoaded)\r\n            return <div>Loading...</div>;\r\n        return (\r\n            <div className=\"Team\">\r\n              \r\n                    {items.map(item => ( \r\n                    <ul id=\"item\">\r\n                     <li id=\"first\">\r\n                    \r\n{ \r\n   Array[0] = \"Sun\",\r\n   Array[1] = \"Mon\",\r\n  Array[2] = \"Tues\",\r\n  Array[3] = \"Wed\",\r\n  Array[4] = \"Thur\",\r\n  Array[5] = \"Fri\",\r\n  Array[6] = \"Sat\",               \r\n  Array[new Date(item.date).getDay()]\r\n}\r\n                    {\",\"}\r\n                    {new Date(item.date).getDate()}\r\n{\r\n Array[0] = \"January\",\r\nArray[1] = \"February\",\r\nArray[2] = \"March\",\r\nArray[3] = \"April\",\r\nArray[4] = \"May\",\r\nArray[5] = \"June\",    \r\nArray[6] = \"July\",\r\nArray[7] = \"August\",\r\nArray[8] = \"September\",\r\nArray[9] = \"October\",\r\nArray[10] = \"November\",\r\nArray[11] = \"December\",               \r\nArray[new Date(item.date).getMonth()]\r\n}                    \r\n                   {\"\"}{\"\"}\r\n                   {new Date(item.date).getFullYear()}\r\n                   </li>\r\n                  \r\n                   <br/> <li id=\"second\">\r\n                   {new Date(item.date).getHours()}\r\n                   {\":\"}\r\n                   {new Date(item.date).getMinutes()}\r\n                   {\" pm ET\"}\r\n                    \r\n                    </li>\r\n                     </ul>\r\n                    ))}\r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Games;","import React from 'react';\r\nimport './popstyle.css'\r\nimport {\r\n    Card, CardText, CardBody,\r\n    CardTitle\r\n  } from 'reactstrap';\r\n\r\nclass Popover extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false,\r\n        }\r\n\r\n    }\r\n\r\n   \r\n    componentDidMount() {\r\n\r\n        fetch('https://www.balldontlie.io/api/v1/teams')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    items: json.data,\r\n                    isLoaded: true, \r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoaded, items } = this.state;\r\n\r\n        if (!isLoaded)\r\n            return <div>Loading...</div>;\r\n        return (\r\n            <div className=\"Team\">\r\n              \r\n                    {items.map(item => ( \r\n\r\n                    <div key={item.id} id=\"pop\">\r\n                    \r\n                     <b>{item.full_name}</b><br/>\r\n                     {\"City:\"} {item.city}<br/>\r\n                     {\"Conference\"} {item.conference}<br/>\r\n                     {\"Division\"} {item.division}<br/>\r\n                    </div>\r\n                  ))}\r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Popover;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}